[{"title":"快速驯服 VSCode - OIer","url":"/2025/04/08/%E5%BF%AB%E9%80%9F%E9%A9%AF%E6%9C%8D%20VSCode%20-%20OIer/","content":"Updates\n2025.04.08 添加了将编译器的可执行文件的路径添加至环境变量。\n2025.04.08 添加了编译器下载步骤。\n2025.05.03 修改了二级标题 Update 为 Updates\n2025.05.03 根据评论区反馈添加了第二种（修改 launch.json）使程序暂停下来的方法。\n2025.05.24 更新了 Markdown ，使其完全符合 Markdown 标准（放到 VSCode 中不会报错啦！）。\n2025.08.04 添加了让程序暂停的第三种方法。\n2025.08.04 删除了二级标题脚注。\n2025.09.06 更改了 配置launch.json章节中的一个小问题。\n2025.09.06 更改了运行和调试代码章节的布局。\n2025.09.14 删除了大量名词的行内代码效果。\nVSCode 简介\n\nVisual Studio Code（简称“VS Code”）是 Microsoft 在2015年4月30日 Build 开发者大会上正式宣布一个运行于 Mac OS X 、Windows 和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器，可在桌面上运行，并且可用于 Windows ，macOS 和 Linux。它具有对 JavaScript ，TypeScript 和 Node.js 的内置支持，并具有丰富的其他语言（例如 C++ ，C＃ ， Java ， Python ， PHP ， Go ）和运行时（例如 .NET 和 Unity ）扩展的生态系统。[1]\n\n下载\n编译器下载\n推荐使用 MinGW-w64 作为你的编译器。通常会从 这里 下载。不过呢，如果你希望使用最新版的 MinGW-w64 编译器，可以从 这里 下载它。具体步骤不过多论述。\nPS：其实用 DEV-C++ 自带的编译器也行。\n注意，无论如何，你都需要将编译器可执行文件的路径添加至环境变量。具体步骤也不过多论述。\nVSCode 下载\n从这里下载 VSCode [2]\nPS：本文 VSCode 版本为 1.99 ，操作系统版本为 Windows 11 。\n下载教程不多复述，我们直接进入插件下载环节。\n插件下载\n我们须要下载以下这几个插件：Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code 、 C/C++ 、 C/C++ Themes 、 C/C++ Extension Pack 。\n插件可以直接到  搜索。\n安装完拓展后，请从 演练:C/C++ 页面选择默认 C/C++ 编译器。\n配置 JSON\n创建文件夹\n首先，你需要创建一个文件夹，\nPS：使用 VSCode 时，所有文件夹和文件都不能使用全角字符命名。\n然后按下图的方法打开。然后点击信任。\n\n创建 launch.json 文件\n然后按照下图找到这个图标  ，点击 创建 launch.json 文件 ，选择 C++ (GDB/LLDB) 。\n配置 launch.json\n\n然后从弹出的窗口里选择 C/C++: (gdb) 启动。\n\n接着将键 program 改为 $&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe ，键 miDebuggerPath 改为你的编译器里的 gdb.exe 的路径并保存。\nPS: 后文中图片展示不是 $&#123;fileDirname&#125; ，是因为这个问题是后面才发现的，图片没改。\n创建 .cpp 文件\n然后点击下图所示的按钮创建一个文件，并命名为 &lt;你想要的文件名&gt;.cpp ，然后随便写点代码。\n\n创建 &amp; 配置 tasks.json 文件\n然后如下图所示，点击 配置默认生成任务 ，选择 C/C++: g++.exe 生成活动文件 ，创建 tasks.json 文件。其中， args 里面是写编译命令的。\n\n在 launch.json 文件中添加 preLaunchTask 键\n最后，需在 launch.json 中键 setupCommands 后面添加一个新的键 preLaunchTask ，值必须和 tasks.json 文件中的键 label 的值相同。\n\n最终结果\n如下图。\n\n调试和运行代码\n使用 VSCode 集成控制台来运行调试代码。\n可以通过下图的按钮来调试和运行 C/C++ 代码。当然，也可以通过 F5 （调试） ， Ctrl + F5 （运行）来完成以上功能。输入输出将在 VSCode 的集成终端来完成。\nPS：似乎某些古老编译器不支持在 VSCode 的集成终端输入输出（大雾，比如 DEV-C++ 自带的编译器。\n\n使用类似 DEV-C++ 的控制台调试代码\n如果你比较喜欢像 DEV-C++ 那样的控制台风格的话，那么你可以将 launch.json 文件中的键 externalConsole 改为 true 。这样就可以打开一个黑乎乎的窗口啦！不过新的问题又来了：这样程序已结束整个窗口就会关闭，为此提供两种解决方案，推荐方案三。\n窗口闪退解决方案一\n在 return 0; 前打上一行代码 system(&quot;pause&quot;); 以让窗口不会立即关闭。\n\n窗口闪退解决方案二\n修改 launch.json 。我们需要把 program 键的值修改为 C:\\\\Windows\\\\System32\\\\cmd.exe，args 键的值修改为 &quot;/c&quot;,&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;,&quot;&amp;&quot;,&quot;pause&quot; 也可以达到跟上面一样的效果。\n\n窗口闪退解决方案三\n在代码主函数 return 0 的位置打一个断点，每次都使用调试来运行代码，这样每次在 return 0 的位置都会停一下，这时候就可以查看结果啦！不过停止程序就需要点下一步或者停止啦！\n\n完结撒花\n好了，如果你按照教程一步步踏实去做的话，现在应该已经掌握快速驯服 VSCode 的方法了，欢迎转载文章！ [3]\n\n\n\n简介来源于百度百科。原页面 https://baike.baidu.com/item/visual studio code/17514281#reference-2 ↩︎\n\n如果操作系统不满足条件（ Windows 版本小于 Windows 10 ， macOS 版本小于 macOS 10.15 ），则须要 从这里 下载当前对系统的最后支持版本。 ↩︎\n\n转载请注明原平台 Luogu ，和作者 Innate_Joker 。 ↩︎\n\n\n\n","categories":["知识分享"],"tags":["VSCode","C++"]},{"title":"WSL 使用基础","url":"/2025/09/14/WSL%20%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/","content":"启用 WSL\n其实如果用的是新版本 VSCode 而且电脑上没有安装 WSL 那么在每次启动 VSCode 时都会提示让你装 WSL 的。如果没有，那么请转到控制面板，启用 ‘适用于 Windows 的 Linux 子系统’ 。如果还未安装 WSL ，那么就会开始下载。\nPS：本文用的是 Windows 11 24H2 家庭版 如果其他版本 Windows 系统有显著差异可以参考其他教程。\n\n安装分发\n查看已安装列表\n通过 wsl --list 命令可以查看已经安装的列表。比如我现在已经安装了，输出如下：\n适用于 Linux 的 Windows 子系统分发:docker-desktop (默认)Ubuntu\n查看可以安装的在线分发\n接着通过 wsl --list --online 命令可以查看可以安装的在线分发列表。输出如下：\n以下是可安装的有效分发的列表。使用 &#x27;wsl.exe --install &lt;Distro&gt;&#x27; 安装。NAME                            FRIENDLY NAMEAlmaLinux-8                     AlmaLinux OS 8AlmaLinux-9                     AlmaLinux OS 9AlmaLinux-Kitten-10             AlmaLinux OS Kitten 10AlmaLinux-10                    AlmaLinux OS 10Debian                          Debian GNU/LinuxFedoraLinux-42                  Fedora Linux 42SUSE-Linux-Enterprise-15-SP6    SUSE Linux Enterprise 15 SP6SUSE-Linux-Enterprise-15-SP7    SUSE Linux Enterprise 15 SP7Ubuntu                          UbuntuUbuntu-24.04                    Ubuntu 24.04 LTSarchlinux                       Arch Linuxkali-linux                      Kali Linux RollingopenSUSE-Tumbleweed             openSUSE TumbleweedopenSUSE-Leap-15.6              openSUSE Leap 15.6Ubuntu-20.04                    Ubuntu 20.04 LTSUbuntu-22.04                    Ubuntu 22.04 LTSOracleLinux_7_9                 Oracle Linux 7.9OracleLinux_8_10                Oracle Linux 8.10OracleLinux_9_5                 Oracle Linux 9.5\n安装分发\n通过 wsl --install &lt;分发名称&gt; 就可以安装分发了。输出如下：\n正在下载: Ubuntu[==========================53.9%                           ]\n启动分发\n通过 wsl --distribution &lt;分发名称&gt; 就可以运行对应的分发名称啦！\nProvisioning the new WSL instance UbuntuThis might take a while...Create a default Unix user account: &lt;你想要的用户名&gt;New password: Retype new password: passwd: password updated successfullyTo run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.See &quot;man sudo_root&quot; for details.Welcome to Ubuntu 24.04.3 LTS (GNU/Linux 5.15.167.4-microsoft-standard-WSL2 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/pro System information as of Sun Sep 14 12:28:32 CST 2025  System load:  0.0                 Processes:             31  Usage of /:   0.1% of 1006.85GB   Users logged in:       0  Memory usage: 5%                  IPv4 address for eth0: 172.20.216.108  Swap usage:   0%This message is shown once a day. To disable it please create the/home/&lt;你的用户名&gt;/.hushlogin file.&lt;你的用户名&gt;&gt;@localhost:/mnt/d/Project/Blog$ \nPS：在输入密码的时候，你会看不见密码字符，这是盲人输出，属于正常现象。\n关闭指定分发\n使用 wsl --terminate &lt;分发名称&gt; 。\nWSL 命令\n来自 wsl --help 。\n版权所有 (c) Microsoft Corporation。保留所有权利。有关此产品的隐私信息，请访问 https://aka.ms/privacy。用法: wsl.exe [Argument][Options...][CommandLine]运行 Linux 二进制文件的参数:    如果未提供命令行，wsl.exe 将启动默认 shell。    --exec, -e &lt;CommandLine&gt;        在不使用默认 Linux shell 的情况下执行指定的命令。    --shell-type &lt;standard|login|none&gt;        使用提供的 shell 类型执行指定的命令。    --        按原样传递剩余的命令行。选项:    --cd &lt;Directory&gt;        将指定目录设置为当前工作目录。        如果使用 ~，则将使用 Linux 用户的主路径。如果路径以        / 字符开始，它将被解释为绝对 Linux 路径。        否则，该值必须是绝对 Windows 路径。    --distribution, -d &lt;DistroName&gt;        运行指定的分发版。    --distribution-id &lt;DistroGuid&gt;        运行指定的分发版 ID。    --user, -u &lt;UserName&gt;        以指定用户身份运行。    --system        为系统分发版启动 shell。用于管理适用于 Linux 的 Windows 子系统的参数:    --help        显示使用情况信息。    --debug-shell        出于诊断目的打开 WSL2 调试 shell。    --install [Distro] [Options...]        安装适用于 Linux 的 Windows 子系统分发版。        有关有效分发版的列表，请使用 &#x27;wsl.exe --list --online&#x27;。        选项:            --enable-wsl1                启用 WSL1 支持。            --from-file &lt;Path&gt;                从本地文件安装分发版。            --legacy                使用旧分发版清单。            --location &lt;Location&gt;                设置分发版的安装路径。            --name &lt;Name&gt;                设置分发的名称。            --no-distribution                仅安装所需的可选组件，不安装分发版。            --no-launch, -n                安装后不要启动分发版。            --version &lt;Version&gt;                指定要用于新分发的版本。            --web-download                从 Internet 而不是 Microsoft Store 下载分发版。    --manage &lt;Distro&gt; &lt;Options...&gt;        更改发行版特定选项。        选项:            --move &lt;Location&gt;                将分发移到新位置。            --set-sparse, -s &lt;true|false&gt;                将发行版的 vhdx 设置为稀疏，从而允许自动回收磁盘空间。            --set-default-user &lt;Username&gt;                设置分发版的默认用户。    --mount &lt;Disk&gt;        在所有 WSL 2 分发版中附加和装载物理磁盘或虚拟磁盘。        选项:            --vhd                指定 &lt;Disk&gt; 引用虚拟硬盘。            --bare                将磁盘附加到 WSL2，但不要装载它。            --name &lt;Name&gt;                使用装入点的自定义名称装载磁盘。            --type &lt;Type&gt;                装载磁盘时要使用的文件系统(如果未指定)默认为 ext4。            --options &lt;Options&gt;                其他装载选项。            --partition &lt;Index&gt;                要装载的分区的索引(如果未指定)默认为整个磁盘。    --set-default-version &lt;Version&gt;        更改新分发版的默认安装版本。    --shutdown        立即终止所有正在运行的分发版和 WSL 2        轻型实用工具虚拟机。    --status        显示适用于 Linux 的 Windows 子系统状态。    --unmount [磁盘]        从所有 WSL2 分发版中卸载和分离磁盘。        如果在没有参数的情况下调用，则卸载和分离所有磁盘。    --uninstall        从此计算机卸载适用于 Linux 的 Windows 子系统包。    --update        更新适用于 Linux 的 Windows 子系统包。        选项:            --pre-release                下载预发行版本(如果可用)。    --version, -v        显示版本信息。用于在适用于 Linux 的 Windows 子系统中管理分发版的参数:    --export &lt;Distro&gt; &lt;FileName&gt; [选项]        将分发版导出到 tar 文件。        文件名可以是 - for stdout。        选项:            --format &lt;Format&gt;                指定导出格式。支持的值: tar、tar.gz、vhd。    --import &lt;Distro&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [选项]        将指定的 tar 文件作为新分发版导入。        文件名可以是 - for stdin。        选项:            --version &lt;Version&gt;                指定要用于新分发的版本。            --vhd                指定所提供的文件是 .vhdx 文件，而不是 tar 文件。                此操作在指定的安装位置创建 .vhdx 文件的副本。    --import-in-place &lt;Distro&gt; &lt;FileName&gt;        将指定的 .vhdx 文件作为新分发版导入。        必须使用 ext4 文件系统类型设置此虚拟硬盘的格式。    --list, -l [选项]        列出分发版。        选项:            --all                列出所有分发版，包括当前                正在安装或卸载的分发版。            --running                仅列出当前正在运行的分发版。            --quiet, -q                仅显示分发版名称。            --verbose, -v                显示有关所有分发版的详细信息。            --online, -o                显示适合通过 &#x27;wsl --install&#x27; 安装的可用分发版列表。    --set-default, -s &lt;Distro&gt;        将分布版设置为默认值。    --set-version &lt;Distro&gt; &lt;Version&gt;        更改指定分发版的版本。    --terminate, -t &lt;Distro&gt;        终止指定的分发版。    --unregister &lt;Distro&gt;        取消注册分发版并删除根文件系统。\n完结撒花\n因为这篇几乎都是命令行操作，所以几乎没有图片。而且展示大多为命令行输出，所以也没有语法高亮，不要在意啦。\n","categories":["知识分享"],"tags":["WSL","Linux"]}]